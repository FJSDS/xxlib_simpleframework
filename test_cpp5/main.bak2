#include <xx_uv.h>

inline xx::MemPool mp;
inline xx::BBuffer_p bbSend(mp.MPCreate<xx::BBuffer>());
inline xx::Stopwatch sw;

inline void HandlePkg(xx::UvTcpUdpBase* peer, xx::BBuffer& recvData)
{
	xx::Object_p pkg;
	if (recvData.ReadRoot(pkg) || !pkg)
	{
		peer->DisconnectImpl();
		return;
	}
	switch (pkg.GetTypeId())
	{
		case xx::TypeId_v<xx::BBuffer>:
		{
			auto& bb = pkg.As<xx::BBuffer>();
			int v = 0;
			if (bb->Read(v))
			{
				peer->DisconnectImpl();
				return;
			}
			v++;
			if (v >= 100000)
			{
				std::cout << sw() << std::endl;
				return;
			}
			bbSend->Clear();
			bbSend->Write(v);
			peer->Send(bbSend);
		}
		break;
		default:
			break;
	}
}



int main()
{
	xx::MemPool::RegisterInternals();
	xx::UvLoop loop(&mp);
	auto listener = loop.CreateTcpListener();
	listener->Bind("0.0.0.0", 12345);
	listener->OnAccept = [](auto peer)
	{
		peer->OnReceivePackage = [peer](auto& recvData)
		{
			HandlePkg(peer, recvData);
		};
	};
	listener->Listen();

	xx::UvTcpClient client(loop);
	client.OnConnect = [&](auto state)
	{
		if (client.Alive())
		{
			int v = 0;
			bbSend->Clear();
			bbSend->Write(v);
			client.Send(bbSend);
		}
	};
	client.OnReceivePackage = [&client](auto& recvData)
	{
		HandlePkg(&client, recvData);
	};
	client.ConnectEx("127.0.0.1", 12345);

	sw.Reset();

	return loop.Run();
}









#pragma execution_character_set("utf-8")
#include "xx_logger.h"

inline xx::Logger* logger = nullptr;
int main(int argc, char const* const* argv)
{
	// 以当前 exe 文件名为前缀，拼接 ".log.db3" 扩展名为库名写入, 表数据总行数限制为 10 条
	logger = new xx::Logger(argv[0], true, 0, 10);
	for (int i = 0; i < 20; ++i)
	{
		logger->Write(i);
	}
	delete logger;
	return 0;
}
